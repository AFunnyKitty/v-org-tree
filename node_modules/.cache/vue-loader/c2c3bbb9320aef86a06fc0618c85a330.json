{"remainingRequest":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lizhigang/Documents/my-world/v-org-tree/src/components/org-tree/org-tree.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/src/components/org-tree/org-tree.vue","mtime":1545539391746},{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/less-loader/dist/cjs.js","mtime":1545539431982},{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import './org-tree';\n",{"version":3,"sources":["org-tree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiLA","file":"org-tree.vue","sourceRoot":"src/components/org-tree","sourcesContent":["<template>\n  <div class=\"org-tree-container\">\n    <div class=\"org-tree\" :class=\"{horizontal, collapsable}\">\n      <org-tree-node\n        :data=\"dataCloned\"\n        :props=\"props\"\n        :horizontal=\"horizontal\"\n        :label-width=\"labelWidth\"\n        :collapsable=\"collapsable\"\n        :node-render=\"nodeRender\"\n        :button-render=\"buttonRender\"\n        :label-class-name=\"labelClassName\"\n        @on-expand=\"handleExpand\"\n        @on-node-click=\"handleNodeClick\"\n      ></org-tree-node>\n    </div>\n  </div>\n</template>\n\n<script>\nimport render from './node'\nimport clonedeep from 'clonedeep'\n\nexport default {\n  name: 'VOrgTree',\n  components: {\n    OrgTreeNode: {\n      render,\n      functional: true\n    }\n  },\n  props: {\n    data: {\n      type: Object,\n      required: true\n    },\n    props: {\n      type: Object,\n      default: () => ({\n        id: 'id',\n        label: 'label',\n        expand: 'expand',\n        children: 'children'\n      })\n    },\n    horizontal: Boolean,\n    collapsable: Boolean,\n    nodeRender: Function,\n    buttonRender: Function,\n    labelWidth: [String, Number],\n    labelClassName: [Function, String],\n    expandAll: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    return {\n      flatData: {},\n      dataCloned: {}\n    }\n  },\n  watch: {\n    data (newData) {\n      this._handleData(newData)\n      this._mapData(this.dataCloned, item => {\n        const { expand } = this.flatData[item[this.prop_id]]\n        if (expand) this.$set(item, this.prop_expand, true)\n      })\n      this._toggleExpand(this.dataCloned, this.expandAll)\n    },\n    expandAll (status) {\n      this._toggleExpand(this.dataCloned, status)\n    }\n  },\n  computed: {\n    prop_id () {\n      return this.props.id\n    },\n    prop_label () {\n      return this.props.label\n    },\n    prop_expand () {\n      return this.props.expand\n    },\n    prop_children () {\n      return this.props.children\n    }\n  },\n  methods: {\n    _handleData (data) {\n      this._cloneData(data)\n    },\n    _cloneData (newData) {\n      this.dataCloned = clonedeep(newData)\n    },\n    _setFlatData (data) {\n      this.flatData[data[this.prop_id]] = data\n    },\n    /**\n     * @description 工具方法，用于遍历树状数据的每个节点， fn为在该节点做的操作，其有一个参数即当前节点数据\n     */\n    _mapData (data, fn) {\n      fn(data)\n      const children = data[this.prop_children]\n      if (children) {\n        children.forEach(child => {\n          this._mapData(child, fn)\n        })\n      }\n    },\n    /**\n     * @description 用来便利所有节点数据，将树状数据扁平化存放到flatData，用于数据更新后展开状态的恢复\n     */\n    _updateExpandStatus () {\n      this._mapData(this.dataCloned, this._setFlatData)\n    },\n    collapse (list) {\n      var _this = this\n      list.forEach(child => {\n        if (child[this.prop_expand]) {\n          child[this.prop_expand] = false\n        }\n        const children = child[this.prop_children]\n        children && _this.collapse(children)\n      })\n    },\n    handleExpand (data) {\n      if (this.prop_expand in data) {\n        data[this.prop_expand] = !data[this.prop_expand]\n        const children = data[this.prop_children]\n        if (!data[this.prop_expand] && children) {\n          this.collapse(children)\n        }\n      } else {\n        this.$set(data, this.prop_expand, true)\n      }\n      this.$emit('on-expand', data, data[this.prop_expand])\n      this._updateExpandStatus()\n    },\n    _toggleExpand (data, status) {\n      var _this = this\n      if (Array.isArray(data)) {\n        data.forEach(item => {\n          _this.$set(item, this.prop_expand, status)\n          const children = item[this.prop_children]\n          if (children) {\n            _this._toggleExpand(children, status)\n          }\n        })\n      } else {\n        _this.$set(data, this.prop_expand, status)\n        const children = data[this.prop_children]\n        if (children) {\n          _this._toggleExpand(children, status)\n        }\n      }\n    },\n    handleNodeClick (e, data) {\n      this.$emit('on-node-click', e, data, () => {\n        this.handleExpand(data)\n      })\n    },\n    toggleExpand () {\n      this._toggleExpand(this.dataCloned, this.expandAll)\n      this._updateExpandStatus()\n    }\n  },\n  mounted () {\n    this._handleData(this.data)\n    this._updateExpandStatus()\n    this._toggleExpand(this.dataCloned, this.expandAll)\n  }\n}\n</script>\n\n<style lang=\"less\">\n@import './org-tree';\n</style>\n"]}]}