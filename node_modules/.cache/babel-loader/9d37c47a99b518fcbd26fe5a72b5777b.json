{"remainingRequest":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/babel-loader/lib/index.js!/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lizhigang/Documents/my-world/v-org-tree/src/components/org-tree/org-tree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/src/components/org-tree/org-tree.vue","mtime":1545539391746},{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport render from './node';\nimport clonedeep from 'clonedeep';\nexport default {\n  name: 'VOrgTree',\n  components: {\n    OrgTreeNode: {\n      render: render,\n      functional: true\n    }\n  },\n  props: {\n    data: {\n      type: Object,\n      required: true\n    },\n    props: {\n      type: Object,\n      default: function _default() {\n        return {\n          id: 'id',\n          label: 'label',\n          expand: 'expand',\n          children: 'children'\n        };\n      }\n    },\n    horizontal: Boolean,\n    collapsable: Boolean,\n    nodeRender: Function,\n    buttonRender: Function,\n    labelWidth: [String, Number],\n    labelClassName: [Function, String],\n    expandAll: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      flatData: {},\n      dataCloned: {}\n    };\n  },\n  watch: {\n    data: function data(newData) {\n      var _this2 = this;\n\n      this._handleData(newData);\n\n      this._mapData(this.dataCloned, function (item) {\n        var expand = _this2.flatData[item[_this2.prop_id]].expand;\n        if (expand) _this2.$set(item, _this2.prop_expand, true);\n      });\n\n      this._toggleExpand(this.dataCloned, this.expandAll);\n    },\n    expandAll: function expandAll(status) {\n      this._toggleExpand(this.dataCloned, status);\n    }\n  },\n  computed: {\n    prop_id: function prop_id() {\n      return this.props.id;\n    },\n    prop_label: function prop_label() {\n      return this.props.label;\n    },\n    prop_expand: function prop_expand() {\n      return this.props.expand;\n    },\n    prop_children: function prop_children() {\n      return this.props.children;\n    }\n  },\n  methods: {\n    _handleData: function _handleData(data) {\n      this._cloneData(data);\n    },\n    _cloneData: function _cloneData(newData) {\n      this.dataCloned = clonedeep(newData);\n    },\n    _setFlatData: function _setFlatData(data) {\n      this.flatData[data[this.prop_id]] = data;\n    },\n\n    /**\n     * @description 工具方法，用于遍历树状数据的每个节点， fn为在该节点做的操作，其有一个参数即当前节点数据\n     */\n    _mapData: function _mapData(data, fn) {\n      var _this3 = this;\n\n      fn(data);\n      var children = data[this.prop_children];\n\n      if (children) {\n        children.forEach(function (child) {\n          _this3._mapData(child, fn);\n        });\n      }\n    },\n\n    /**\n     * @description 用来便利所有节点数据，将树状数据扁平化存放到flatData，用于数据更新后展开状态的恢复\n     */\n    _updateExpandStatus: function _updateExpandStatus() {\n      this._mapData(this.dataCloned, this._setFlatData);\n    },\n    collapse: function collapse(list) {\n      var _this4 = this;\n\n      var _this = this;\n\n      list.forEach(function (child) {\n        if (child[_this4.prop_expand]) {\n          child[_this4.prop_expand] = false;\n        }\n\n        var children = child[_this4.prop_children];\n        children && _this.collapse(children);\n      });\n    },\n    handleExpand: function handleExpand(data) {\n      if (this.prop_expand in data) {\n        data[this.prop_expand] = !data[this.prop_expand];\n        var children = data[this.prop_children];\n\n        if (!data[this.prop_expand] && children) {\n          this.collapse(children);\n        }\n      } else {\n        this.$set(data, this.prop_expand, true);\n      }\n\n      this.$emit('on-expand', data, data[this.prop_expand]);\n\n      this._updateExpandStatus();\n    },\n    _toggleExpand: function _toggleExpand(data, status) {\n      var _this5 = this;\n\n      var _this = this;\n\n      if (Array.isArray(data)) {\n        data.forEach(function (item) {\n          _this.$set(item, _this5.prop_expand, status);\n\n          var children = item[_this5.prop_children];\n\n          if (children) {\n            _this._toggleExpand(children, status);\n          }\n        });\n      } else {\n        _this.$set(data, this.prop_expand, status);\n\n        var children = data[this.prop_children];\n\n        if (children) {\n          _this._toggleExpand(children, status);\n        }\n      }\n    },\n    handleNodeClick: function handleNodeClick(e, data) {\n      var _this6 = this;\n\n      this.$emit('on-node-click', e, data, function () {\n        _this6.handleExpand(data);\n      });\n    },\n    toggleExpand: function toggleExpand() {\n      this._toggleExpand(this.dataCloned, this.expandAll);\n\n      this._updateExpandStatus();\n    }\n  },\n  mounted: function mounted() {\n    this._handleData(this.data);\n\n    this._updateExpandStatus();\n\n    this._toggleExpand(this.dataCloned, this.expandAll);\n  }\n};",{"version":3,"sources":["org-tree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAoBA,OAAA,MAAA,MAAA,QAAA;AACA,OAAA,SAAA,MAAA,WAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,UADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,WAAA,EAAA;AACA,MAAA,MAAA,EAAA,MADA;AAEA,MAAA,UAAA,EAAA;AAFA;AADA,GAFA;AAQA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KADA;AAKA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA;AACA,UAAA,EAAA,EAAA,IADA;AAEA,UAAA,KAAA,EAAA,OAFA;AAGA,UAAA,MAAA,EAAA,QAHA;AAIA,UAAA,QAAA,EAAA;AAJA,SAAA;AAAA;AAFA,KALA;AAcA,IAAA,UAAA,EAAA,OAdA;AAeA,IAAA,WAAA,EAAA,OAfA;AAgBA,IAAA,UAAA,EAAA,QAhBA;AAiBA,IAAA,YAAA,EAAA,QAjBA;AAkBA,IAAA,UAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CAlBA;AAmBA,IAAA,cAAA,EAAA,CAAA,QAAA,EAAA,MAAA,CAnBA;AAoBA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AApBA,GARA;AAiCA,EAAA,IAjCA,kBAiCA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,EADA;AAEA,MAAA,UAAA,EAAA;AAFA,KAAA;AAIA,GAtCA;AAuCA,EAAA,KAAA,EAAA;AACA,IAAA,IADA,gBACA,OADA,EACA;AAAA;;AACA,WAAA,WAAA,CAAA,OAAA;;AACA,WAAA,QAAA,CAAA,KAAA,UAAA,EAAA,UAAA,IAAA,EAAA;AAAA,YACA,MADA,GACA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,MAAA,CAAA,OAAA,CAAA,CADA,CACA,MADA;AAEA,YAAA,MAAA,EAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,MAAA,CAAA,WAAA,EAAA,IAAA;AACA,OAHA;;AAIA,WAAA,aAAA,CAAA,KAAA,UAAA,EAAA,KAAA,SAAA;AACA,KARA;AASA,IAAA,SATA,qBASA,MATA,EASA;AACA,WAAA,aAAA,CAAA,KAAA,UAAA,EAAA,MAAA;AACA;AAXA,GAvCA;AAoDA,EAAA,QAAA,EAAA;AACA,IAAA,OADA,qBACA;AACA,aAAA,KAAA,KAAA,CAAA,EAAA;AACA,KAHA;AAIA,IAAA,UAJA,wBAIA;AACA,aAAA,KAAA,KAAA,CAAA,KAAA;AACA,KANA;AAOA,IAAA,WAPA,yBAOA;AACA,aAAA,KAAA,KAAA,CAAA,MAAA;AACA,KATA;AAUA,IAAA,aAVA,2BAUA;AACA,aAAA,KAAA,KAAA,CAAA,QAAA;AACA;AAZA,GApDA;AAkEA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,uBACA,IADA,EACA;AACA,WAAA,UAAA,CAAA,IAAA;AACA,KAHA;AAIA,IAAA,UAJA,sBAIA,OAJA,EAIA;AACA,WAAA,UAAA,GAAA,SAAA,CAAA,OAAA,CAAA;AACA,KANA;AAOA,IAAA,YAPA,wBAOA,IAPA,EAOA;AACA,WAAA,QAAA,CAAA,IAAA,CAAA,KAAA,OAAA,CAAA,IAAA,IAAA;AACA,KATA;;AAUA;;;AAGA,IAAA,QAbA,oBAaA,IAbA,EAaA,EAbA,EAaA;AAAA;;AACA,MAAA,EAAA,CAAA,IAAA,CAAA;AACA,UAAA,QAAA,GAAA,IAAA,CAAA,KAAA,aAAA,CAAA;;AACA,UAAA,QAAA,EAAA;AACA,QAAA,QAAA,CAAA,OAAA,CAAA,UAAA,KAAA,EAAA;AACA,UAAA,MAAA,CAAA,QAAA,CAAA,KAAA,EAAA,EAAA;AACA,SAFA;AAGA;AACA,KArBA;;AAsBA;;;AAGA,IAAA,mBAzBA,iCAyBA;AACA,WAAA,QAAA,CAAA,KAAA,UAAA,EAAA,KAAA,YAAA;AACA,KA3BA;AA4BA,IAAA,QA5BA,oBA4BA,IA5BA,EA4BA;AAAA;;AACA,UAAA,KAAA,GAAA,IAAA;;AACA,MAAA,IAAA,CAAA,OAAA,CAAA,UAAA,KAAA,EAAA;AACA,YAAA,KAAA,CAAA,MAAA,CAAA,WAAA,CAAA,EAAA;AACA,UAAA,KAAA,CAAA,MAAA,CAAA,WAAA,CAAA,GAAA,KAAA;AACA;;AACA,YAAA,QAAA,GAAA,KAAA,CAAA,MAAA,CAAA,aAAA,CAAA;AACA,QAAA,QAAA,IAAA,KAAA,CAAA,QAAA,CAAA,QAAA,CAAA;AACA,OANA;AAOA,KArCA;AAsCA,IAAA,YAtCA,wBAsCA,IAtCA,EAsCA;AACA,UAAA,KAAA,WAAA,IAAA,IAAA,EAAA;AACA,QAAA,IAAA,CAAA,KAAA,WAAA,CAAA,GAAA,CAAA,IAAA,CAAA,KAAA,WAAA,CAAA;AACA,YAAA,QAAA,GAAA,IAAA,CAAA,KAAA,aAAA,CAAA;;AACA,YAAA,CAAA,IAAA,CAAA,KAAA,WAAA,CAAA,IAAA,QAAA,EAAA;AACA,eAAA,QAAA,CAAA,QAAA;AACA;AACA,OANA,MAMA;AACA,aAAA,IAAA,CAAA,IAAA,EAAA,KAAA,WAAA,EAAA,IAAA;AACA;;AACA,WAAA,KAAA,CAAA,WAAA,EAAA,IAAA,EAAA,IAAA,CAAA,KAAA,WAAA,CAAA;;AACA,WAAA,mBAAA;AACA,KAlDA;AAmDA,IAAA,aAnDA,yBAmDA,IAnDA,EAmDA,MAnDA,EAmDA;AAAA;;AACA,UAAA,KAAA,GAAA,IAAA;;AACA,UAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA,EAAA;AACA,QAAA,IAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,UAAA,KAAA,CAAA,IAAA,CAAA,IAAA,EAAA,MAAA,CAAA,WAAA,EAAA,MAAA;;AACA,cAAA,QAAA,GAAA,IAAA,CAAA,MAAA,CAAA,aAAA,CAAA;;AACA,cAAA,QAAA,EAAA;AACA,YAAA,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,MAAA;AACA;AACA,SANA;AAOA,OARA,MAQA;AACA,QAAA,KAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,WAAA,EAAA,MAAA;;AACA,YAAA,QAAA,GAAA,IAAA,CAAA,KAAA,aAAA,CAAA;;AACA,YAAA,QAAA,EAAA;AACA,UAAA,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,MAAA;AACA;AACA;AACA,KApEA;AAqEA,IAAA,eArEA,2BAqEA,CArEA,EAqEA,IArEA,EAqEA;AAAA;;AACA,WAAA,KAAA,CAAA,eAAA,EAAA,CAAA,EAAA,IAAA,EAAA,YAAA;AACA,QAAA,MAAA,CAAA,YAAA,CAAA,IAAA;AACA,OAFA;AAGA,KAzEA;AA0EA,IAAA,YA1EA,0BA0EA;AACA,WAAA,aAAA,CAAA,KAAA,UAAA,EAAA,KAAA,SAAA;;AACA,WAAA,mBAAA;AACA;AA7EA,GAlEA;AAiJA,EAAA,OAjJA,qBAiJA;AACA,SAAA,WAAA,CAAA,KAAA,IAAA;;AACA,SAAA,mBAAA;;AACA,SAAA,aAAA,CAAA,KAAA,UAAA,EAAA,KAAA,SAAA;AACA;AArJA,CAAA","sourcesContent":["<template>\n  <div class=\"org-tree-container\">\n    <div class=\"org-tree\" :class=\"{horizontal, collapsable}\">\n      <org-tree-node\n        :data=\"dataCloned\"\n        :props=\"props\"\n        :horizontal=\"horizontal\"\n        :label-width=\"labelWidth\"\n        :collapsable=\"collapsable\"\n        :node-render=\"nodeRender\"\n        :button-render=\"buttonRender\"\n        :label-class-name=\"labelClassName\"\n        @on-expand=\"handleExpand\"\n        @on-node-click=\"handleNodeClick\"\n      ></org-tree-node>\n    </div>\n  </div>\n</template>\n\n<script>\nimport render from './node'\nimport clonedeep from 'clonedeep'\n\nexport default {\n  name: 'VOrgTree',\n  components: {\n    OrgTreeNode: {\n      render,\n      functional: true\n    }\n  },\n  props: {\n    data: {\n      type: Object,\n      required: true\n    },\n    props: {\n      type: Object,\n      default: () => ({\n        id: 'id',\n        label: 'label',\n        expand: 'expand',\n        children: 'children'\n      })\n    },\n    horizontal: Boolean,\n    collapsable: Boolean,\n    nodeRender: Function,\n    buttonRender: Function,\n    labelWidth: [String, Number],\n    labelClassName: [Function, String],\n    expandAll: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    return {\n      flatData: {},\n      dataCloned: {}\n    }\n  },\n  watch: {\n    data (newData) {\n      this._handleData(newData)\n      this._mapData(this.dataCloned, item => {\n        const { expand } = this.flatData[item[this.prop_id]]\n        if (expand) this.$set(item, this.prop_expand, true)\n      })\n      this._toggleExpand(this.dataCloned, this.expandAll)\n    },\n    expandAll (status) {\n      this._toggleExpand(this.dataCloned, status)\n    }\n  },\n  computed: {\n    prop_id () {\n      return this.props.id\n    },\n    prop_label () {\n      return this.props.label\n    },\n    prop_expand () {\n      return this.props.expand\n    },\n    prop_children () {\n      return this.props.children\n    }\n  },\n  methods: {\n    _handleData (data) {\n      this._cloneData(data)\n    },\n    _cloneData (newData) {\n      this.dataCloned = clonedeep(newData)\n    },\n    _setFlatData (data) {\n      this.flatData[data[this.prop_id]] = data\n    },\n    /**\n     * @description 工具方法，用于遍历树状数据的每个节点， fn为在该节点做的操作，其有一个参数即当前节点数据\n     */\n    _mapData (data, fn) {\n      fn(data)\n      const children = data[this.prop_children]\n      if (children) {\n        children.forEach(child => {\n          this._mapData(child, fn)\n        })\n      }\n    },\n    /**\n     * @description 用来便利所有节点数据，将树状数据扁平化存放到flatData，用于数据更新后展开状态的恢复\n     */\n    _updateExpandStatus () {\n      this._mapData(this.dataCloned, this._setFlatData)\n    },\n    collapse (list) {\n      var _this = this\n      list.forEach(child => {\n        if (child[this.prop_expand]) {\n          child[this.prop_expand] = false\n        }\n        const children = child[this.prop_children]\n        children && _this.collapse(children)\n      })\n    },\n    handleExpand (data) {\n      if (this.prop_expand in data) {\n        data[this.prop_expand] = !data[this.prop_expand]\n        const children = data[this.prop_children]\n        if (!data[this.prop_expand] && children) {\n          this.collapse(children)\n        }\n      } else {\n        this.$set(data, this.prop_expand, true)\n      }\n      this.$emit('on-expand', data, data[this.prop_expand])\n      this._updateExpandStatus()\n    },\n    _toggleExpand (data, status) {\n      var _this = this\n      if (Array.isArray(data)) {\n        data.forEach(item => {\n          _this.$set(item, this.prop_expand, status)\n          const children = item[this.prop_children]\n          if (children) {\n            _this._toggleExpand(children, status)\n          }\n        })\n      } else {\n        _this.$set(data, this.prop_expand, status)\n        const children = data[this.prop_children]\n        if (children) {\n          _this._toggleExpand(children, status)\n        }\n      }\n    },\n    handleNodeClick (e, data) {\n      this.$emit('on-node-click', e, data, () => {\n        this.handleExpand(data)\n      })\n    },\n    toggleExpand () {\n      this._toggleExpand(this.dataCloned, this.expandAll)\n      this._updateExpandStatus()\n    }\n  },\n  mounted () {\n    this._handleData(this.data)\n    this._updateExpandStatus()\n    this._toggleExpand(this.dataCloned, this.expandAll)\n  }\n}\n</script>\n\n<style lang=\"less\">\n@import './org-tree';\n</style>\n"],"sourceRoot":"src/components/org-tree"}]}