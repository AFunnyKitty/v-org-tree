{"remainingRequest":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/thread-loader/dist/cjs.js!/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/babel-loader/lib/index.js!/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/eslint-loader/index.js??ref--13-0!/Users/lizhigang/Documents/my-world/v-org-tree/src/components/org-tree/node.js","dependencies":[{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/src/components/org-tree/node.js","mtime":1545539391745},{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["// 判断是否叶子节点\nvar isLeaf = function isLeaf(data, prop) {\n  return !(Array.isArray(data[prop]) && data[prop].length > 0);\n}; // 创建 node 节点\n\n\nexport var renderNode = function renderNode(h, data, context) {\n  var props = context.props;\n  var cls = ['org-tree-node'];\n  var childNodes = [];\n  var children = data[props.props.children];\n\n  if (isLeaf(data, props.props.children)) {\n    cls.push('is-leaf');\n  } else if (props.collapsable && !data[props.props.expand]) {\n    cls.push('collapsed');\n  }\n\n  childNodes.push(renderLabel(h, data, context));\n\n  if (!props.collapsable || data[props.props.expand]) {\n    childNodes.push(renderChildren(h, children, context));\n  }\n\n  return h('div', {\n    domProps: {\n      className: cls.join(' ')\n    }\n  }, childNodes);\n}; // 创建展开折叠按钮\n\nexport var renderBtn = function renderBtn(h, data, context) {\n  var props = context.props;\n  var expandHandler = context.listeners['on-expand'];\n  var cls = ['org-tree-node-btn'];\n\n  if (data[props.props.expand]) {\n    cls.push('expanded');\n  }\n\n  return h('span', {\n    'class': 'org-tree-button-wrapper',\n    on: {\n      click: function click(e) {\n        e.stopPropagation();\n        expandHandler && expandHandler(data);\n      }\n    }\n  }, [props.buttonRender ? props.buttonRender(h, data) : h('span', {\n    'class': cls.join(' ')\n  })]);\n}; // 创建 label 节点\n\nexport var renderLabel = function renderLabel(h, data, context) {\n  var props = context.props;\n  var label = data[props.props.label];\n  var nodeRender = props.nodeRender;\n  var clickHandler = context.listeners['on-node-click'];\n  var childNodes = [];\n\n  if (typeof nodeRender === 'function') {\n    var vnode = nodeRender(h, data);\n    vnode && childNodes.push(vnode);\n  } else {\n    childNodes.push(label);\n  }\n\n  if (props.collapsable && !isLeaf(data, props.props.children)) {\n    childNodes.push(renderBtn(h, data, context));\n  }\n\n  var cls = ['org-tree-node-label-inner'];\n  var labelWidth = props.labelWidth,\n      labelClassName = props.labelClassName;\n\n  if (typeof labelWidth === 'number') {\n    labelWidth += 'px';\n  }\n\n  if (typeof labelClassName === 'function') {\n    labelClassName = labelClassName(data);\n  }\n\n  labelClassName && cls.push(labelClassName);\n  return h('div', {\n    domProps: {\n      className: 'org-tree-node-label'\n    }\n  }, [h('div', {\n    domProps: {\n      className: cls.join(' ')\n    },\n    style: {\n      width: labelWidth\n    },\n    on: {\n      click: function click(e) {\n        return clickHandler && clickHandler(e, data);\n      }\n    }\n  }, childNodes)]);\n}; // 创建 node 子节点\n\nexport var renderChildren = function renderChildren(h, list, context) {\n  if (Array.isArray(list) && list.length) {\n    var children = list.map(function (item) {\n      return renderNode(h, item, context);\n    });\n    return h('div', {\n      domProps: {\n        className: 'org-tree-node-children'\n      }\n    }, children);\n  }\n\n  return '';\n};\nexport var render = function render(h, context) {\n  var props = context.props;\n  return renderNode(h, props.data, context);\n};\nexport default render;",null]}