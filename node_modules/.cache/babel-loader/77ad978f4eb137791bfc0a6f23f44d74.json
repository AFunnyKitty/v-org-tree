{"remainingRequest":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/thread-loader/dist/cjs.js!/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/babel-loader/lib/index.js!/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lizhigang/Documents/my-world/v-org-tree/src/components/org-tree/org-tree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/src/components/org-tree/org-tree.vue","mtime":1545539391746},{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lizhigang/Documents/my-world/v-org-tree/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport render from './node';\nimport clonedeep from 'clonedeep';\nexport default {\n  name: 'VOrgTree',\n  components: {\n    OrgTreeNode: {\n      render: render,\n      functional: true\n    }\n  },\n  props: {\n    data: {\n      type: Object,\n      required: true\n    },\n    props: {\n      type: Object,\n      default: function _default() {\n        return {\n          id: 'id',\n          label: 'label',\n          expand: 'expand',\n          children: 'children'\n        };\n      }\n    },\n    horizontal: Boolean,\n    collapsable: Boolean,\n    nodeRender: Function,\n    buttonRender: Function,\n    labelWidth: [String, Number],\n    labelClassName: [Function, String],\n    expandAll: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      flatData: {},\n      dataCloned: {}\n    };\n  },\n  watch: {\n    data: function data(newData) {\n      var _this2 = this;\n\n      this._handleData(newData);\n\n      this._mapData(this.dataCloned, function (item) {\n        var expand = _this2.flatData[item[_this2.prop_id]].expand;\n        if (expand) _this2.$set(item, _this2.prop_expand, true);\n      });\n\n      this._toggleExpand(this.dataCloned, this.expandAll);\n    },\n    expandAll: function expandAll(status) {\n      this._toggleExpand(this.dataCloned, status);\n    }\n  },\n  computed: {\n    prop_id: function prop_id() {\n      return this.props.id;\n    },\n    prop_label: function prop_label() {\n      return this.props.label;\n    },\n    prop_expand: function prop_expand() {\n      return this.props.expand;\n    },\n    prop_children: function prop_children() {\n      return this.props.children;\n    }\n  },\n  methods: {\n    _handleData: function _handleData(data) {\n      this._cloneData(data);\n    },\n    _cloneData: function _cloneData(newData) {\n      this.dataCloned = clonedeep(newData);\n    },\n    _setFlatData: function _setFlatData(data) {\n      this.flatData[data[this.prop_id]] = data;\n    },\n\n    /**\n     * @description 工具方法，用于遍历树状数据的每个节点， fn为在该节点做的操作，其有一个参数即当前节点数据\n     */\n    _mapData: function _mapData(data, fn) {\n      var _this3 = this;\n\n      fn(data);\n      var children = data[this.prop_children];\n\n      if (children) {\n        children.forEach(function (child) {\n          _this3._mapData(child, fn);\n        });\n      }\n    },\n\n    /**\n     * @description 用来便利所有节点数据，将树状数据扁平化存放到flatData，用于数据更新后展开状态的恢复\n     */\n    _updateExpandStatus: function _updateExpandStatus() {\n      this._mapData(this.dataCloned, this._setFlatData);\n    },\n    collapse: function collapse(list) {\n      var _this4 = this;\n\n      var _this = this;\n\n      list.forEach(function (child) {\n        if (child[_this4.prop_expand]) {\n          child[_this4.prop_expand] = false;\n        }\n\n        var children = child[_this4.prop_children];\n        children && _this.collapse(children);\n      });\n    },\n    handleExpand: function handleExpand(data) {\n      if (this.prop_expand in data) {\n        data[this.prop_expand] = !data[this.prop_expand];\n        var children = data[this.prop_children];\n\n        if (!data[this.prop_expand] && children) {\n          this.collapse(children);\n        }\n      } else {\n        this.$set(data, this.prop_expand, true);\n      }\n\n      this.$emit('on-expand', data, data[this.prop_expand]);\n\n      this._updateExpandStatus();\n    },\n    _toggleExpand: function _toggleExpand(data, status) {\n      var _this5 = this;\n\n      var _this = this;\n\n      if (Array.isArray(data)) {\n        data.forEach(function (item) {\n          _this.$set(item, _this5.prop_expand, status);\n\n          var children = item[_this5.prop_children];\n\n          if (children) {\n            _this._toggleExpand(children, status);\n          }\n        });\n      } else {\n        _this.$set(data, this.prop_expand, status);\n\n        var children = data[this.prop_children];\n\n        if (children) {\n          _this._toggleExpand(children, status);\n        }\n      }\n    },\n    handleNodeClick: function handleNodeClick(e, data) {\n      var _this6 = this;\n\n      this.$emit('on-node-click', e, data, function () {\n        _this6.handleExpand(data);\n      });\n    },\n    toggleExpand: function toggleExpand() {\n      this._toggleExpand(this.dataCloned, this.expandAll);\n\n      this._updateExpandStatus();\n    }\n  },\n  mounted: function mounted() {\n    this._handleData(this.data);\n\n    this._updateExpandStatus();\n\n    this._toggleExpand(this.dataCloned, this.expandAll);\n  }\n};",null]}